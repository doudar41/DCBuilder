//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/RetroCrawler/DungeonInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DungeonInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DungeonInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DungeonInputs"",
    ""maps"": [
        {
            ""name"": ""CrawlerStandart"",
            ""id"": ""f342f9c4-83a5-43e3-9da5-aec6b0dc823c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e07ce3ba-3f7a-4a98-998c-baadf8c36473"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""6f44d8df-a0b8-42fe-8d8b-2a6189c5d726"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""b9c844bc-3569-427d-91a8-299fe2e145c2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""1969b7de-70e1-4a91-9f5a-40b8d234a647"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""55945649-644b-4394-a456-1f5d6c0ce13a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""134bb05c-145b-4dd3-bf6c-9632cdcbab90"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""f7e75e29-afc9-44e3-afa3-478d401567b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""7ad4235c-3f79-4ff2-b0e4-400d8d450cb0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""0e3713bd-b10c-415d-a485-571e05340270"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""66417908-8080-42ae-b042-190bc519cb3b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""964b3e41-2823-4314-bf61-43fe2fc0b519"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0335355-f98f-42a4-948d-f65365c5ab32"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0d77f8cf-851f-4046-85f7-be2f93e1bd2f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3665dbaa-d7c9-4ea5-a6a0-db0bc4e8e7be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6e8f7601-7d7f-4359-893d-ce66da22eef2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""482a6055-a037-43c4-9c76-ac7e9c8fd4fd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""51914b74-bb39-4208-9550-cf0dbaa17487"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""495a69a1-df60-4c0e-97b3-035cfa490945"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3c055d8-0651-402e-bd7f-2674eb52e9ab"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5271829d-052f-4d77-a508-a147c3b9f623"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25fc78ee-156f-4578-9232-6b826471f8fd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30439522-553e-4ea4-97e9-fa98c51c4540"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""LastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a196ee3-4a17-480a-aed9-e93cfe6a38fb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f880b62-8d9f-48c0-8171-c627881405ca"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""986ea895-db11-4026-a252-342271005503"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65a08eb5-4026-4f48-9fad-d9712b33fc8f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // CrawlerStandart
        m_CrawlerStandart = asset.FindActionMap("CrawlerStandart", throwIfNotFound: true);
        m_CrawlerStandart_Move = m_CrawlerStandart.FindAction("Move", throwIfNotFound: true);
        m_CrawlerStandart_Turn = m_CrawlerStandart.FindAction("Turn", throwIfNotFound: true);
        m_CrawlerStandart_MouseClick = m_CrawlerStandart.FindAction("MouseClick", throwIfNotFound: true);
        m_CrawlerStandart_Inventory = m_CrawlerStandart.FindAction("Inventory", throwIfNotFound: true);
        m_CrawlerStandart_Attack = m_CrawlerStandart.FindAction("Attack", throwIfNotFound: true);
        m_CrawlerStandart_LastSpell = m_CrawlerStandart.FindAction("LastSpell", throwIfNotFound: true);
        m_CrawlerStandart_RightClick = m_CrawlerStandart.FindAction("RightClick", throwIfNotFound: true);
        m_CrawlerStandart_Point = m_CrawlerStandart.FindAction("Point", throwIfNotFound: true);
        m_CrawlerStandart_Cancel = m_CrawlerStandart.FindAction("Cancel", throwIfNotFound: true);
    }

    ~@DungeonInputs()
    {
        UnityEngine.Debug.Assert(!m_CrawlerStandart.enabled, "This will cause a leak and performance issues, DungeonInputs.CrawlerStandart.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CrawlerStandart
    private readonly InputActionMap m_CrawlerStandart;
    private List<ICrawlerStandartActions> m_CrawlerStandartActionsCallbackInterfaces = new List<ICrawlerStandartActions>();
    private readonly InputAction m_CrawlerStandart_Move;
    private readonly InputAction m_CrawlerStandart_Turn;
    private readonly InputAction m_CrawlerStandart_MouseClick;
    private readonly InputAction m_CrawlerStandart_Inventory;
    private readonly InputAction m_CrawlerStandart_Attack;
    private readonly InputAction m_CrawlerStandart_LastSpell;
    private readonly InputAction m_CrawlerStandart_RightClick;
    private readonly InputAction m_CrawlerStandart_Point;
    private readonly InputAction m_CrawlerStandart_Cancel;
    public struct CrawlerStandartActions
    {
        private @DungeonInputs m_Wrapper;
        public CrawlerStandartActions(@DungeonInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CrawlerStandart_Move;
        public InputAction @Turn => m_Wrapper.m_CrawlerStandart_Turn;
        public InputAction @MouseClick => m_Wrapper.m_CrawlerStandart_MouseClick;
        public InputAction @Inventory => m_Wrapper.m_CrawlerStandart_Inventory;
        public InputAction @Attack => m_Wrapper.m_CrawlerStandart_Attack;
        public InputAction @LastSpell => m_Wrapper.m_CrawlerStandart_LastSpell;
        public InputAction @RightClick => m_Wrapper.m_CrawlerStandart_RightClick;
        public InputAction @Point => m_Wrapper.m_CrawlerStandart_Point;
        public InputAction @Cancel => m_Wrapper.m_CrawlerStandart_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_CrawlerStandart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrawlerStandartActions set) { return set.Get(); }
        public void AddCallbacks(ICrawlerStandartActions instance)
        {
            if (instance == null || m_Wrapper.m_CrawlerStandartActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrawlerStandartActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @LastSpell.started += instance.OnLastSpell;
            @LastSpell.performed += instance.OnLastSpell;
            @LastSpell.canceled += instance.OnLastSpell;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(ICrawlerStandartActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @LastSpell.started -= instance.OnLastSpell;
            @LastSpell.performed -= instance.OnLastSpell;
            @LastSpell.canceled -= instance.OnLastSpell;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(ICrawlerStandartActions instance)
        {
            if (m_Wrapper.m_CrawlerStandartActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrawlerStandartActions instance)
        {
            foreach (var item in m_Wrapper.m_CrawlerStandartActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrawlerStandartActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrawlerStandartActions @CrawlerStandart => new CrawlerStandartActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ICrawlerStandartActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnLastSpell(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
